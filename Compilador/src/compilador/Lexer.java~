/* The following code was generated by JFlex 1.6.1 */

package compilador;
import static compilador.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Andy/Documents/NetBeansProjects/Compilador/src/compilador/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\35\1\37\1\37\1\36\22\0\1\3\7\0\1\44"+
    "\1\45\1\43\1\41\1\3\1\42\1\0\1\34\12\2\1\0\1\50"+
    "\1\0\1\40\3\0\32\1\6\0\1\13\1\14\1\16\1\24\1\10"+
    "\1\7\1\27\1\22\1\4\1\1\1\20\1\11\1\25\1\5\1\17"+
    "\1\30\1\1\1\15\1\12\1\6\1\23\1\31\1\32\1\26\1\21"+
    "\1\33\1\46\1\0\1\47\7\0\1\37\u1fa2\0\1\37\1\37\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\21\2\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\2\1\20\34\2\1\21\7\2\1\4\1\0"+
    "\1\22\2\2\1\23\2\2\1\24\4\2\1\25\40\2"+
    "\1\0\6\2\1\26\3\2\1\27\1\30\1\2\1\31"+
    "\12\2\1\32\3\2\1\33\2\2\1\34\2\2\1\35"+
    "\1\36\4\2\1\37\2\2\1\3\6\2\1\40\1\41"+
    "\1\42\4\2\1\43\1\44\3\2\1\45\2\2\1\46"+
    "\1\47\1\2\1\50\7\2\1\51\3\2\1\52\1\53"+
    "\3\2\1\54\2\2\1\55\1\56\2\2\1\57\2\2"+
    "\1\60\3\2\1\61\5\2\1\62\1\63\3\2\1\64"+
    "\1\2\1\65\1\66\1\67\6\2\1\70\1\2\1\71"+
    "\1\72\1\2\1\73\1\74\2\2\1\75\1\2\1\76"+
    "\1\77\1\100\2\2\1\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\315\0\366\0\u011f"+
    "\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215\0\u023e\0\u0267"+
    "\0\u0290\0\u02b9\0\u02e2\0\u030b\0\u0334\0\u035d\0\u0386\0\51"+
    "\0\51\0\51\0\51\0\51\0\u03af\0\51\0\51\0\51"+
    "\0\51\0\u03d8\0\122\0\u0401\0\u042a\0\u0453\0\u047c\0\u04a5"+
    "\0\u04ce\0\u04f7\0\u0520\0\u0549\0\u0572\0\u059b\0\u05c4\0\u05ed"+
    "\0\u0616\0\u063f\0\u0668\0\u0691\0\u06ba\0\u06e3\0\u070c\0\u0735"+
    "\0\u075e\0\u0787\0\u07b0\0\u07d9\0\u0802\0\u082b\0\u0854\0\u087d"+
    "\0\u08a6\0\u08cf\0\u08f8\0\u0921\0\u094a\0\u0973\0\u099c\0\u09c5"+
    "\0\u09ee\0\u0a17\0\u0a40\0\u0a69\0\122\0\u0a92\0\u0abb\0\122"+
    "\0\u0ae4\0\u0b0d\0\u0b36\0\u0b5f\0\122\0\u0b88\0\u0bb1\0\u0bda"+
    "\0\u0c03\0\u0c2c\0\u0c55\0\u0c7e\0\u0ca7\0\u0cd0\0\u0cf9\0\u0d22"+
    "\0\u0d4b\0\u0d74\0\u0d9d\0\u0dc6\0\u0def\0\u0e18\0\u0e41\0\u0e6a"+
    "\0\u0e93\0\u0ebc\0\u0ee5\0\u0f0e\0\u0f37\0\u0f60\0\u0f89\0\u0fb2"+
    "\0\u0fdb\0\u1004\0\u102d\0\u1056\0\u107f\0\u10a8\0\u10d1\0\u10fa"+
    "\0\u1123\0\u114c\0\u1175\0\u119e\0\122\0\u11c7\0\u11f0\0\u1219"+
    "\0\122\0\122\0\u1242\0\122\0\u126b\0\u1294\0\u12bd\0\u12e6"+
    "\0\u130f\0\u1338\0\u1361\0\u138a\0\u13b3\0\u13dc\0\122\0\u1405"+
    "\0\u142e\0\u1457\0\122\0\u1480\0\u14a9\0\122\0\u14d2\0\u14fb"+
    "\0\122\0\122\0\u1524\0\u154d\0\u1576\0\u159f\0\122\0\u15c8"+
    "\0\u15f1\0\51\0\u161a\0\u1643\0\u166c\0\u1695\0\u16be\0\u16e7"+
    "\0\122\0\u1710\0\122\0\u1739\0\u1762\0\u178b\0\u17b4\0\122"+
    "\0\122\0\u17dd\0\u1806\0\u182f\0\122\0\u1858\0\u1881\0\122"+
    "\0\122\0\u18aa\0\122\0\u18d3\0\u18fc\0\u1925\0\u194e\0\u1977"+
    "\0\u19a0\0\u19c9\0\122\0\u19f2\0\u1a1b\0\u1a44\0\122\0\122"+
    "\0\u1a6d\0\u1a96\0\u1abf\0\122\0\u1ae8\0\u1b11\0\122\0\122"+
    "\0\u1b3a\0\u1b63\0\122\0\u1b8c\0\u1bb5\0\122\0\u1bde\0\u1c07"+
    "\0\u1c30\0\122\0\u1c59\0\u1c82\0\u1cab\0\u1cd4\0\u1cfd\0\122"+
    "\0\122\0\u1d26\0\u1d4f\0\u1d78\0\122\0\u1da1\0\122\0\122"+
    "\0\122\0\u1dca\0\u1df3\0\u1e1c\0\u1e45\0\u1e6e\0\u1e97\0\122"+
    "\0\u1ec0\0\122\0\122\0\u1ee9\0\122\0\122\0\u1f12\0\u1f3b"+
    "\0\122\0\u1f64\0\122\0\122\0\122\0\u1f8d\0\u1fb6\0\122";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\5\3"+
    "\1\21\1\22\1\3\1\23\1\24\1\25\1\26\1\3"+
    "\1\27\1\30\1\5\1\0\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\52\0\2\3\1\0"+
    "\30\3\17\0\1\4\51\0\1\5\32\0\1\5\13\0"+
    "\2\3\1\0\1\3\1\42\1\3\1\43\15\3\1\44"+
    "\6\3\16\0\2\3\1\0\4\3\1\45\2\3\1\46"+
    "\20\3\16\0\2\3\1\0\11\3\1\47\4\3\1\50"+
    "\11\3\16\0\2\3\1\0\1\51\4\3\1\52\5\3"+
    "\1\53\14\3\16\0\2\3\1\0\1\3\1\54\3\3"+
    "\1\55\14\3\1\56\5\3\16\0\2\3\1\0\13\3"+
    "\1\57\14\3\16\0\2\3\1\0\2\3\1\60\12\3"+
    "\1\61\1\62\1\63\6\3\1\64\1\3\16\0\2\3"+
    "\1\0\6\3\1\65\1\3\1\66\17\3\16\0\2\3"+
    "\1\0\11\3\1\67\1\3\1\70\1\3\1\71\12\3"+
    "\16\0\2\3\1\0\4\3\1\72\23\3\16\0\2\3"+
    "\1\0\5\3\1\73\1\3\1\74\3\3\1\75\2\3"+
    "\1\76\11\3\16\0\2\3\1\0\4\3\1\77\6\3"+
    "\1\100\14\3\16\0\2\3\1\0\7\3\1\101\20\3"+
    "\16\0\2\3\1\0\13\3\1\102\14\3\16\0\2\3"+
    "\1\0\7\3\1\103\1\3\1\104\5\3\1\105\10\3"+
    "\16\0\2\3\1\0\13\3\1\106\14\3\16\0\2\3"+
    "\1\0\16\3\1\107\11\3\51\0\1\110\56\0\1\111"+
    "\7\0\2\3\1\0\2\3\1\112\3\3\1\113\21\3"+
    "\16\0\2\3\1\0\24\3\1\114\3\3\16\0\2\3"+
    "\1\0\26\3\1\115\1\3\16\0\2\3\1\0\2\3"+
    "\1\116\25\3\16\0\2\3\1\0\7\3\1\117\5\3"+
    "\1\120\12\3\16\0\2\3\1\0\1\121\10\3\1\122"+
    "\16\3\16\0\2\3\1\0\1\3\1\123\26\3\16\0"+
    "\2\3\1\0\13\3\1\124\14\3\16\0\2\3\1\0"+
    "\11\3\1\125\16\3\16\0\2\3\1\0\17\3\1\126"+
    "\10\3\16\0\2\3\1\0\6\3\1\127\21\3\16\0"+
    "\2\3\1\0\2\3\1\130\25\3\16\0\2\3\1\0"+
    "\1\3\1\131\26\3\16\0\2\3\1\0\7\3\1\132"+
    "\1\3\1\133\16\3\16\0\2\3\1\0\1\3\1\134"+
    "\26\3\16\0\2\3\1\0\13\3\1\135\14\3\16\0"+
    "\2\3\1\0\24\3\1\136\3\3\16\0\2\3\1\0"+
    "\1\137\27\3\16\0\2\3\1\0\6\3\1\140\21\3"+
    "\16\0\2\3\1\0\6\3\1\141\21\3\16\0\2\3"+
    "\1\0\4\3\1\142\23\3\16\0\2\3\1\0\13\3"+
    "\1\143\14\3\16\0\2\3\1\0\2\3\1\144\25\3"+
    "\16\0\2\3\1\0\2\3\1\145\25\3\16\0\2\3"+
    "\1\0\7\3\1\146\20\3\16\0\2\3\1\0\2\3"+
    "\1\147\3\3\1\150\21\3\16\0\2\3\1\0\1\3"+
    "\1\151\26\3\16\0\2\3\1\0\7\3\1\152\20\3"+
    "\16\0\2\3\1\0\3\3\1\153\24\3\16\0\2\3"+
    "\1\0\17\3\1\154\10\3\16\0\2\3\1\0\1\155"+
    "\27\3\16\0\2\3\1\0\2\3\1\156\25\3\16\0"+
    "\2\3\1\0\12\3\1\157\15\3\16\0\2\3\1\0"+
    "\1\160\12\3\1\161\14\3\16\0\2\3\1\0\10\3"+
    "\1\162\17\3\16\0\2\3\1\0\1\163\4\3\1\164"+
    "\22\3\16\0\2\3\1\0\1\165\27\3\15\0\35\110"+
    "\3\0\11\110\2\0\1\166\47\0\2\3\1\0\4\3"+
    "\1\167\23\3\16\0\2\3\1\0\2\3\1\170\25\3"+
    "\16\0\2\3\1\0\5\3\1\171\5\3\1\172\14\3"+
    "\16\0\2\3\1\0\1\173\27\3\16\0\2\3\1\0"+
    "\1\3\1\174\26\3\16\0\2\3\1\0\6\3\1\175"+
    "\21\3\16\0\2\3\1\0\13\3\1\176\14\3\16\0"+
    "\2\3\1\0\7\3\1\177\20\3\16\0\2\3\1\0"+
    "\7\3\1\200\20\3\16\0\2\3\1\0\21\3\1\201"+
    "\6\3\16\0\2\3\1\0\4\3\1\202\23\3\16\0"+
    "\2\3\1\0\4\3\1\203\23\3\16\0\2\3\1\0"+
    "\23\3\1\204\4\3\16\0\2\3\1\0\2\3\1\205"+
    "\25\3\16\0\2\3\1\0\1\206\27\3\16\0\2\3"+
    "\1\0\12\3\1\207\15\3\16\0\2\3\1\0\11\3"+
    "\1\210\16\3\16\0\2\3\1\0\4\3\1\211\23\3"+
    "\16\0\2\3\1\0\2\3\1\212\25\3\16\0\2\3"+
    "\1\0\4\3\1\213\23\3\16\0\2\3\1\0\2\3"+
    "\1\214\25\3\16\0\2\3\1\0\7\3\1\215\20\3"+
    "\16\0\2\3\1\0\5\3\1\216\22\3\16\0\2\3"+
    "\1\0\4\3\1\217\23\3\16\0\2\3\1\0\17\3"+
    "\1\220\10\3\16\0\2\3\1\0\6\3\1\221\21\3"+
    "\16\0\2\3\1\0\12\3\1\222\15\3\16\0\2\3"+
    "\1\0\4\3\1\223\23\3\16\0\2\3\1\0\2\3"+
    "\1\224\3\3\1\225\21\3\16\0\2\3\1\0\11\3"+
    "\1\226\16\3\16\0\2\3\1\0\7\3\1\227\20\3"+
    "\16\0\2\3\1\0\10\3\1\230\17\3\16\0\2\3"+
    "\1\0\1\3\1\231\26\3\16\0\2\3\1\0\13\3"+
    "\1\232\14\3\16\0\2\3\1\0\14\3\1\233\13\3"+
    "\16\0\2\3\1\0\25\3\1\234\2\3\16\0\2\3"+
    "\1\0\2\3\1\235\25\3\16\0\2\3\1\0\5\3"+
    "\1\236\22\3\16\0\2\3\1\0\20\3\1\237\7\3"+
    "\16\0\2\3\1\0\7\3\1\240\20\3\16\0\2\3"+
    "\1\0\5\3\1\241\22\3\17\0\1\166\42\0\1\242"+
    "\4\0\2\3\1\0\11\3\1\243\16\3\16\0\2\3"+
    "\1\0\7\3\1\244\20\3\16\0\2\3\1\0\4\3"+
    "\1\245\23\3\16\0\2\3\1\0\11\3\1\246\16\3"+
    "\16\0\2\3\1\0\25\3\1\247\2\3\16\0\2\3"+
    "\1\0\6\3\1\250\21\3\16\0\2\3\1\0\26\3"+
    "\1\251\1\3\16\0\2\3\1\0\5\3\1\252\22\3"+
    "\16\0\2\3\1\0\2\3\1\253\25\3\16\0\2\3"+
    "\1\0\1\3\1\254\26\3\16\0\2\3\1\0\1\255"+
    "\27\3\16\0\2\3\1\0\12\3\1\256\15\3\16\0"+
    "\2\3\1\0\16\3\1\257\11\3\16\0\2\3\1\0"+
    "\2\3\1\260\25\3\16\0\2\3\1\0\11\3\1\261"+
    "\16\3\16\0\2\3\1\0\12\3\1\262\15\3\16\0"+
    "\2\3\1\0\11\3\1\263\16\3\16\0\2\3\1\0"+
    "\11\3\1\264\16\3\16\0\2\3\1\0\14\3\1\265"+
    "\13\3\16\0\2\3\1\0\4\3\1\266\23\3\16\0"+
    "\2\3\1\0\11\3\1\267\16\3\16\0\2\3\1\0"+
    "\6\3\1\270\21\3\16\0\2\3\1\0\16\3\1\271"+
    "\11\3\16\0\2\3\1\0\1\272\27\3\16\0\2\3"+
    "\1\0\2\3\1\273\25\3\16\0\2\3\1\0\17\3"+
    "\1\274\10\3\16\0\2\3\1\0\5\3\1\275\22\3"+
    "\16\0\2\3\1\0\7\3\1\276\20\3\16\0\2\3"+
    "\1\0\7\3\1\277\20\3\16\0\2\3\1\0\4\3"+
    "\1\300\23\3\16\0\2\3\1\0\1\301\27\3\16\0"+
    "\2\3\1\0\2\3\1\302\25\3\16\0\2\3\1\0"+
    "\4\3\1\303\23\3\16\0\2\3\1\0\3\3\1\304"+
    "\24\3\16\0\2\3\1\0\1\3\1\305\26\3\16\0"+
    "\2\3\1\0\21\3\1\306\6\3\16\0\2\3\1\0"+
    "\2\3\1\307\25\3\16\0\2\3\1\0\4\3\1\310"+
    "\23\3\16\0\2\3\1\0\1\311\27\3\16\0\2\3"+
    "\1\0\5\3\1\312\22\3\16\0\2\3\1\0\20\3"+
    "\1\313\7\3\16\0\2\3\1\0\12\3\1\314\15\3"+
    "\16\0\2\3\1\0\2\3\1\315\25\3\16\0\2\3"+
    "\1\0\11\3\1\316\16\3\16\0\2\3\1\0\16\3"+
    "\1\317\11\3\16\0\2\3\1\0\2\3\1\320\25\3"+
    "\16\0\2\3\1\0\7\3\1\321\20\3\16\0\2\3"+
    "\1\0\7\3\1\322\20\3\16\0\2\3\1\0\1\3"+
    "\1\323\26\3\16\0\2\3\1\0\1\3\1\324\26\3"+
    "\16\0\2\3\1\0\5\3\1\325\22\3\16\0\2\3"+
    "\1\0\4\3\1\326\23\3\16\0\2\3\1\0\23\3"+
    "\1\327\4\3\16\0\2\3\1\0\2\3\1\330\25\3"+
    "\16\0\2\3\1\0\12\3\1\331\15\3\16\0\2\3"+
    "\1\0\12\3\1\332\15\3\16\0\2\3\1\0\1\333"+
    "\27\3\16\0\2\3\1\0\7\3\1\334\20\3\16\0"+
    "\2\3\1\0\12\3\1\335\15\3\16\0\2\3\1\0"+
    "\4\3\1\336\23\3\16\0\2\3\1\0\4\3\1\337"+
    "\23\3\16\0\2\3\1\0\15\3\1\340\12\3\16\0"+
    "\2\3\1\0\6\3\1\341\21\3\16\0\2\3\1\0"+
    "\3\3\1\342\24\3\16\0\2\3\1\0\13\3\1\343"+
    "\14\3\16\0\2\3\1\0\12\3\1\344\15\3\16\0"+
    "\2\3\1\0\1\3\1\345\26\3\16\0\2\3\1\0"+
    "\17\3\1\346\10\3\16\0\2\3\1\0\2\3\1\347"+
    "\25\3\16\0\2\3\1\0\4\3\1\350\23\3\16\0"+
    "\2\3\1\0\4\3\1\351\23\3\16\0\2\3\1\0"+
    "\2\3\1\352\25\3\16\0\2\3\1\0\5\3\1\353"+
    "\22\3\16\0\2\3\1\0\12\3\1\354\15\3\16\0"+
    "\2\3\1\0\4\3\1\355\23\3\16\0\2\3\1\0"+
    "\1\3\1\356\26\3\16\0\2\3\1\0\1\3\1\357"+
    "\26\3\16\0\2\3\1\0\24\3\1\360\3\3\16\0"+
    "\2\3\1\0\1\3\1\361\26\3\16\0\2\3\1\0"+
    "\2\3\1\362\25\3\16\0\2\3\1\0\4\3\1\363"+
    "\23\3\16\0\2\3\1\0\4\3\1\364\23\3\16\0"+
    "\2\3\1\0\4\3\1\365\23\3\16\0\2\3\1\0"+
    "\4\3\1\366\23\3\16\0\2\3\1\0\13\3\1\367"+
    "\14\3\16\0\2\3\1\0\2\3\1\370\25\3\16\0"+
    "\2\3\1\0\2\3\1\371\25\3\16\0\2\3\1\0"+
    "\1\372\27\3\16\0\2\3\1\0\20\3\1\373\7\3"+
    "\16\0\2\3\1\0\3\3\1\374\24\3\16\0\2\3"+
    "\1\0\6\3\1\375\21\3\16\0\2\3\1\0\27\3"+
    "\1\376\16\0\2\3\1\0\4\3\1\377\23\3\16\0"+
    "\2\3\1\0\20\3\1\u0100\7\3\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8159];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\25\1\5\11\1\1\4\11\47\1\1\0"+
    "\54\1\1\0\53\1\1\11\136\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 152) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return Error;
            }
          case 66: break;
          case 2: 
            { lexeme=yytext (); return Identificador;
            }
          case 67: break;
          case 3: 
            { lexeme=yytext (); return Numero ;
            }
          case 68: break;
          case 4: 
            { /*Ignore*/
            }
          case 69: break;
          case 5: 
            { lexeme=yytext (); return Division;
            }
          case 70: break;
          case 6: 
            { return Linea;
            }
          case 71: break;
          case 7: 
            { lexeme=yytext (); return Igual;
            }
          case 72: break;
          case 8: 
            { lexeme=yytext (); return Suma;
            }
          case 73: break;
          case 9: 
            { lexeme=yytext (); return Resta;
            }
          case 74: break;
          case 10: 
            { lexeme=yytext (); return Multiplicacion;
            }
          case 75: break;
          case 11: 
            { lexeme=yytext (); return Parentesis_a;
            }
          case 76: break;
          case 12: 
            { lexeme=yytext (); return Parentesis_c;
            }
          case 77: break;
          case 13: 
            { lexeme=yytext (); return Llave_a;
            }
          case 78: break;
          case 14: 
            { lexeme=yytext (); return Llave_c;
            }
          case 79: break;
          case 15: 
            { lexeme=yytext (); return P_coma;
            }
          case 80: break;
          case 16: 
            { lexeme=yytext (); return If;
            }
          case 81: break;
          case 17: 
            { lexeme=yytext (); return Do;
            }
          case 82: break;
          case 18: 
            { lexeme=yytext (); return Int;
            }
          case 83: break;
          case 19: 
            { lexeme=yytext (); return New;
            }
          case 84: break;
          case 20: 
            { lexeme=yytext (); return Try;
            }
          case 85: break;
          case 21: 
            { lexeme=yytext (); return For;
            }
          case 86: break;
          case 22: 
            { lexeme=yytext (); return This;
            }
          case 87: break;
          case 23: 
            { lexeme=yytext (); return Enum;
            }
          case 88: break;
          case 24: 
            { lexeme=yytext (); return Else;
            }
          case 89: break;
          case 25: 
            { lexeme=yytext (); return Long;
            }
          case 90: break;
          case 26: 
            { lexeme=yytext (); return Byte;
            }
          case 91: break;
          case 27: 
            { lexeme=yytext (); return Case;
            }
          case 92: break;
          case 28: 
            { lexeme=yytext (); return Char;
            }
          case 93: break;
          case 29: 
            { lexeme=yytext (); returnMain;
            }
          case 94: break;
          case 30: 
            { lexeme=yytext (); return Goto;
            }
          case 95: break;
          case 31: 
            { lexeme=yytext (); return Void;
            }
          case 96: break;
          case 32: 
            { lexeme=yytext (); return Throw;
            }
          case 97: break;
          case 33: 
            { lexeme=yytext (); return Final;
            }
          case 98: break;
          case 34: 
            { lexeme=yytext (); return Float;
            }
          case 99: break;
          case 35: 
            { lexeme=yytext (); return Short;
            }
          case 100: break;
          case 36: 
            { lexeme=yytext (); return Super;
            }
          case 101: break;
          case 37: 
            { lexeme=yytext (); return Break;
            }
          case 102: break;
          case 38: 
            { lexeme=yytext (); return Class;
            }
          case 103: break;
          case 39: 
            { lexeme=yytext (); return Catch;
            }
          case 104: break;
          case 40: 
            { lexeme=yytext (); return Const;
            }
          case 105: break;
          case 41: 
            { lexeme=yytext (); return While;
            }
          case 106: break;
          case 42: 
            { lexeme=yytext (); return Import;
            }
          case 107: break;
          case 43: 
            { lexeme=yytext (); return Native;
            }
          case 108: break;
          case 44: 
            { lexeme=yytext (); return Static;
            }
          case 109: break;
          case 45: 
            { lexeme=yytext (); return Switch;
            }
          case 110: break;
          case 46: 
            { lexeme=yytext (); return Assert;
            }
          case 111: break;
          case 47: 
            { lexeme=yytext (); return Return;
            }
          case 112: break;
          case 48: 
            { lexeme=yytext (); return Double;
            }
          case 113: break;
          case 49: 
            { lexeme=yytext (); return Public;
            }
          case 114: break;
          case 50: 
            { lexeme=yytext (); return Finally;
            }
          case 115: break;
          case 51: 
            { lexeme=yytext (); return Extends;
            }
          case 116: break;
          case 52: 
            { lexeme=yytext (); return Boolean;
            }
          case 117: break;
          case 53: 
            { lexeme=yytext (); return Default;
            }
          case 118: break;
          case 54: 
            { lexeme=yytext (); return Package;
            }
          case 119: break;
          case 55: 
            { lexeme=yytext (); return Private;
            }
          case 120: break;
          case 56: 
            { lexeme=yytext (); return Strictfp;
            }
          case 121: break;
          case 57: 
            { lexeme=yytext (); return Asbstract;
            }
          case 122: break;
          case 58: 
            { lexeme=yytext (); return Continue;
            }
          case 123: break;
          case 59: 
            { lexeme=yytext (); return Volatile;
            }
          case 124: break;
          case 60: 
            { lexeme=yytext (); return Interface;
            }
          case 125: break;
          case 61: 
            { lexeme=yytext (); return Transient;
            }
          case 126: break;
          case 62: 
            { lexeme=yytext (); return Protected;
            }
          case 127: break;
          case 63: 
            { lexeme=yytext (); return Instanceof;
            }
          case 128: break;
          case 64: 
            { lexeme=yytext (); return Implementes;
            }
          case 129: break;
          case 65: 
            { lexeme=yytext (); return Synchronized;
            }
          case 130: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
